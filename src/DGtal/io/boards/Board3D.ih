/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file   Board3D.ih
 * @author Martial Tola <http://liris.cnrs.fr/martial.tola/>
 * @date   mercredi 22 juin 2011
 *
 * @brief
 *
 * Implementation of inline methods defined in Board3D.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/io/CDrawableWithDisplay3D.h"
#include "DGtal/io/Color.h"

#include <limits>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
 * Set the default color for future drawing.
 *
 * @param aColor: a DGtal::Color (allow to set a trasnparency value).
 *
 **/
template < typename Space, typename KSpace>
inline
DGtal::Board3D<Space, KSpace> &
DGtal::Board3D<Space, KSpace>::operator<<(const DGtal::Color & aColor)
{
  myDefaultColor=aColor;
  return *this;
}


/**
 * Draws the drawable [object] in this board. It should satisfy
 * the concept CDrawableWithBoard3D, which requires for instance a
 * method setStyle( Board3D & ).
 *
 * @param object any drawable object.
 * @return a reference on 'this'.
 */
template < typename Space, typename KSpace>
template <typename TDrawableWithDisplay3D>
inline
DGtal::Board3D<Space, KSpace> &
DGtal::Board3D<Space, KSpace>::operator<<( const TDrawableWithDisplay3D & object )
{
  BOOST_CONCEPT_ASSERT((CDrawableWithDisplay3D< TDrawableWithDisplay3D, Space, KSpace>));

  DGtal::Display3DFactory<Space,KSpace>::draw(*this, object);
  return *this;
}



///////////////////////////////////////////////////////////////////////////////
// Standard services - public :

/*!
 * \brief Constructor.
 */
template < typename Space, typename KSpace>
inline
DGtal::Board3D<Space, KSpace>::Board3D() : Display3D<Space,KSpace>()
{
  init();
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param outOBJ the output stream where the object is written.
 */
template < typename Space, typename KSpace>
inline
void
DGtal::Board3D<Space, KSpace>::selfDisplay ( std::ostream & outOBJ ) const
{
  outOBJ << "[Board3D]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template < typename Space, typename KSpace>
bool
DGtal::Board3D<Space, KSpace>::isValid() const
{
  return true;
}


/**
 * Save a OBJ image.
 * @param filename filename of the image to save.
 */
template < typename Space, typename KSpace>
inline
void DGtal::Board3D<Space, KSpace>::saveOBJ(const std::string & filename)
{

  size_t k, j; //id of each elements and sub elements of a list for the .OBJ identification
  double Re, Gr, Bl, Tr; // colors of the elements
  double sizePixel = 0.003 ;  // size of one pixel (depending on resolution )
  std::ofstream outOBJ; //OBJ file where to write
  std::ofstream outMTL; //MTL file where to write
  std::stringstream bufMTL; // Buffering what to write in the MTL file

  //WARNING quand deux obj ont le meme nom ils fusionnent (danger deux sets differents fusionnes)

  std::string noExt(filename.substr(0, filename.find_first_of("."))); //the filename withoutOBJ any extention
  std::stringstream nameOBJ;
  std::stringstream nameMTL;
  nameOBJ << noExt << ".obj";
  nameMTL << noExt << ".mtl";

  outOBJ.open(nameOBJ.str().c_str());
  outOBJ << "#  OBJ format"<< std::endl;
  outOBJ << "# generated from Board3D from the DGTal library"<< std::endl;
  outOBJ << "mtllib " <<  nameMTL.str() << std::endl;
  outOBJ << std::endl;

  outMTL.open(nameMTL.str().c_str());
  outMTL << "#  MTL format"<< std::endl;
  outMTL << "# generated from Board3D from the DGTal library"<< std::endl;

  //OPT head
  // TODOLP tests unitaires pour chaque partie

  //myClippingPlaneList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //std::vector< clippingPlaneD3D >::const_iterator
  {
    if(Board3D<Space, KSpace>::myClippingPlaneList.size()> 0)
      {
        trace.info() << "number of clipping plane : "
                     << Board3D<Space, KSpace>::myClippingPlaneList.size() << std::endl;
      }
  }

  // Draw the shapes -----------------------------------------------------------------------

  // myBallSetList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    k=0;//id of each BallSetList for the .OBJ identification
    for ( typename std::vector< std::vector< typename Board3D<Space, KSpace>::BallD3D> >::const_iterator it = Board3D<Space, KSpace>::myBallSetList.begin();
          it != Board3D<Space, KSpace>::myBallSetList.end(); it++)
      {
        std::ostringstream tmpStream; // checking that points exist before creating an object
        for (typename std::vector<  typename Board3D<Space, KSpace>::BallD3D>::const_iterator s_it = it->begin();
             s_it != it->end(); s_it++)
          {
            //test if a clipping plane do not cut it
            bool notCut =true;
            typename std::vector< typename Board3D<Space, KSpace>::ClippingPlaneD3D>::const_iterator itClip = Board3D<Space, KSpace>::myClippingPlaneList.begin();
            while (itClip !=Board3D<Space, KSpace>::myClippingPlaneList.end() && notCut )
              {
                double d2 = ( itClip->a * (*s_it)[0]) + (itClip->b * (*s_it)[1]) + ( itClip->c * (*s_it)[2] ) + itClip->d;
                notCut = ( d2 >= 0);

                itClip ++;
              }
            if (notCut)
              {
                tmpStream << "v " << (*s_it)[0] << " " << (*s_it)[1] << " " << (*s_it)[2] << std::endl;
                tmpStream << "f " << "-1" << " " << "-1" << " "<< "-1" << std::endl;
              }
          }

        if (tmpStream.str().size() > 0)
          {
            std::stringstream name;
            name << Board3D<Space, KSpace>::myBallSetNameList.at(k);
            if ( name.str() == "")
              {
                name << "myBallSetList_" << k ;
              }

            typename std::vector< typename Board3D<Space, KSpace>::BallD3D>::const_iterator itBegin = it->begin();
            unsigned int matid = getMaterialIndex(itBegin->color);
            std::stringstream matName;
            matName << "myBallSetList_" << k << "MAT";

            outOBJ << "o  " << name.str() << std::endl;
            outOBJ << "usemtl " << matName.str() << std::endl;
            outOBJ << tmpStream.str();

//            typename std::vector< typename Board3D<Space, KSpace>::BallD3D>::const_iterator itBegin = it->begin();
            Re = itBegin->color.red() /255.0 ;
            Gr = itBegin->color.green() /255.0;
            Bl = itBegin->color.blue() /255.0;
            Tr = itBegin->color.alpha() /255.0;

            bufMTL << "newmtl " << matName.str()  <<std::endl;
            bufMTL << "Ka " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Kd " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Ks 0 0 0" << std::endl;
            bufMTL << "d " << Tr << std::endl;
            bufMTL << "illum 2" << std::endl << std::endl;

          }
        k++;
      }
  }

  // myLineSetList+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    j =0;
    k=0;//id of each LineSetList for the .OBJ identification
    for(typename std::vector<std::vector< typename Board3D<Space, KSpace>::LineD3D> >::const_iterator it =Board3D<Space, KSpace>::myLineSetList.begin();
        it!= Board3D<Space, KSpace>::myLineSetList.end();   it++)
      {
        std::ostringstream tmpStream;
        for (typename std::vector< typename Board3D<Space, KSpace>::LineD3D>::const_iterator s_it = it->begin();
             s_it != it->end();++s_it)
          {

            //test if a clipping plane do not cut it
            bool notCut =true;
            typename std::vector< typename Board3D<Space, KSpace>::ClippingPlaneD3D>::const_iterator itClip = Board3D<Space, KSpace>::myClippingPlaneList.begin();
            while (itClip !=Board3D<Space, KSpace>::myClippingPlaneList.end() && notCut )
              {
                double a = itClip->a;
                double b = itClip->b;
                double c = itClip->c;
                double d = itClip->d;
                double d2 ;
                d2 = ( a * s_it->point1[0]) + (b * (s_it->point1[1] -sizePixel)) + ( c * s_it->point1[2] ) + d;
                notCut = ( d2 >= 0);
                d2 = ( a * s_it->point1[0]) + (b * (s_it->point1[1] +sizePixel)) + ( c * s_it->point1[2] ) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * s_it->point2[0]) + (b * (s_it->point2[1] +sizePixel)) + ( c * s_it->point2[2] ) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * s_it->point2[0]) + (b * (s_it->point2[1] -sizePixel)) + ( c * s_it->point2[2] ) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * s_it->point1[0]) + (b * s_it->point1[1]) + ( c * (s_it->point1[2] -sizePixel )) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * s_it->point1[0]) + (b * s_it->point1[1]) + ( c * (s_it->point1[2] +sizePixel )) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * s_it->point2[0]) + (b * s_it->point2[1]) + ( c * (s_it->point2[2] +sizePixel )) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * s_it->point2[0]) + (b * s_it->point2[1]) + ( c * (s_it->point2[2] -sizePixel )) + d;
                notCut = ( notCut  && ( d2 >= 0) );

                itClip ++;
              }

            if (notCut)
              {
                // OBJ dont know how to draw lines, have to make a cuboid with a depth and height of a pixel width
                tmpStream << "v " << s_it->point1[0]     << " " << s_it->point1[1] -sizePixel << " " << s_it->point1[2] << std::endl;
                tmpStream << "v " << s_it->point1[0]     << " " << s_it->point1[1] +sizePixel << " " << s_it->point1[2] << std::endl;
                tmpStream << "v " << s_it->point2[0]     << " " << s_it->point2[1] +sizePixel << " " << s_it->point2[2] << std::endl;
                tmpStream << "v " << s_it->point2[0]     << " " << s_it->point2[1] -sizePixel << " " << s_it->point2[2] << std::endl;
                tmpStream << "v " << s_it->point1[0]     << " " << s_it->point1[1]     << " " << s_it->point1[2] -sizePixel << std::endl;
                tmpStream << "v " << s_it->point1[0]     << " " << s_it->point1[1]     << " " << s_it->point1[2] +sizePixel<< std::endl;
                tmpStream << "v " << s_it->point2[0]     << " " << s_it->point2[1]     << " " << s_it->point2[2] +sizePixel<< std::endl;
                tmpStream << "v " << s_it->point2[0]     << " " << s_it->point2[1]     << " " << s_it->point2[2] -sizePixel<< std::endl;

                tmpStream  << "vn " <<  "-1"  << " " << "0" << " " << "0" << std::endl;//left
                tmpStream  << "vn " <<  "0"  << " " << "0" << " " << "-1" << std::endl;//front
                tmpStream  << "vn " <<  "0"  << " " << "1" << " " << "0" << std::endl;//up
                tmpStream  << "vn " <<  "0"  << " " << "0" << " " << "1" << std::endl;//back
                tmpStream  << "vn " <<  "0"  << " " << "-1" << " " << "0" << std::endl;//down
                tmpStream  << "vn " <<  "1"  << " " << "0" << " " << "0" << std::endl;//right


                tmpStream << "f " << "-8//-6" << " " << "-7//-6" << " " << "-5//-6"<< " " << "-6//-6" << std::endl;//left
                tmpStream << "f " << "-8//-5" << " " << "-6//-5" << " " << "-2//-5"<< " " << "-4//-5"<< std::endl;//front
                tmpStream << "f " << "-8//-4" << " " << "-7//-4" << " " << "-3//-4"<< " " << "-4//-4"<< std::endl;//up
                tmpStream << "f " << "-7//-3" << " " << "-5//-3" << " " << "-1//-3"<< " " << "-3//-3"<< std::endl;//back
                tmpStream << "f " << "-6//-2" << " " << "-5//-2" << " " << "-1//-2"<< " " << "-2//-2"<< std::endl;//down
                tmpStream << "f " << "-4//-1" << " " << "-3//-1" << " " << "-1//-1"<< " " << "-2//-1"<< std::endl;//right

                j++;
              }
          }
        if (tmpStream.str() != "")
          {
            std::stringstream name;
            name << Board3D<Space, KSpace>::myLineSetNameList.at(k);
            if ( name.str()== "")
              {
                name << "myLineSetList_" << k ;
              }

            typename std::vector< typename Board3D<Space, KSpace>::LineD3D>::const_iterator itBegin = it->begin();
            unsigned int matid = getMaterialIndex(itBegin->color);
            std::stringstream matName;
            matName << "myLineSetList_" << k  << "MAT";

            outOBJ << "o " << name.str() << std::endl;
            outOBJ << "usemtl " << matName.str() << std::endl;
            outOBJ << tmpStream.str();

//            typename std::vector< typename Board3D<Space, KSpace>::LineD3D>::const_iterator itBegin = it->begin();
            Re = itBegin->color.red() /255.0 ;
            Gr = itBegin->color.green() /255.0;
            Bl = itBegin->color.blue() /255.0;
            Tr = itBegin->color.alpha() /255.0;

            bufMTL << "newmtl " << matName.str()  <<std::endl;
            bufMTL << "Ka " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Kd " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Ks 0 0 0" << std::endl;
            bufMTL << "d " << Tr << std::endl;
            bufMTL << "illum 2" << std::endl << std::endl;
          }

        k++;
      }
  }

  // myCubeSetList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    j  = 0 ; //id of each Cube sub list for the .OBJ identification
    k = 0; // id of each list
    for(typename std::vector<std::vector< typename Board3D<Space, KSpace>::CubeD3D> >::const_iterator it =Board3D<Space, KSpace>::myCubeSetList.begin();
        it != Board3D<Space, KSpace>::myCubeSetList.end();   it++)
      {
        std::ostringstream tmpStream;
        for (typename std::vector< typename Board3D<Space, KSpace>::CubeD3D>::const_iterator s_it = it->begin();
             s_it != it->end(); ++s_it)
          {
            double wid = s_it->width;
            double x = s_it->center[0];
            double y = s_it->center[1];
            double z = s_it->center[2];

            double x1 = x - wid;
            double x2 = x + wid;
            double y1 = y - wid;
            double y2 = y + wid;
            double z1 = z - wid;
            double z2 = z + wid;
            //test if a clipping plane do not cut it
            bool notCut =true;
            typename std::vector< typename Board3D<Space, KSpace>::ClippingPlaneD3D>::const_iterator itClip = Board3D<Space, KSpace>::myClippingPlaneList.begin();
            while (itClip !=Board3D<Space, KSpace>::myClippingPlaneList.end() && notCut )
              {
                double a = itClip->a;
                double b = itClip->b;
                double c = itClip->c;
                double d = itClip->d;
                double d2 = ( a * x1) + (b * y1) + ( c * z2 ) + d;
                notCut = ( d2 >= 0);

                d2 = ( a * x2) + (b * y1) + ( c * z2) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * x1) + (b * y1) + ( c * z1) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * x2) + (b * y1) + ( c * z1) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * x1) + (b * y2) + ( c * z2) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * x2) + (b * y2) + ( c * z2) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * x1) + (b * y2) + ( c * z1) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * x2) + (b * y2) + ( c * z1) + d;
                notCut = ( notCut  && ( d2 >= 0) );

                itClip ++;
              }

            //OPT cube

            if (notCut)
              {
                // this version is  one cube with (x,y,z) the center of it and wid its distance between it and its faces
                tmpStream  << "v " << x1   << " " << y1 << " " << z2 << std::endl;
                tmpStream  << "v " << x2   << " " << y1 << " " << z2 << std::endl;
                tmpStream  << "v " << x1   << " " << y1 << " " << z1 << std::endl;
                tmpStream  << "v " << x2   << " " << y1 << " " << z1 << std::endl;
                tmpStream  << "v " << x1   << " " << y2 << " " << z2 << std::endl;
                tmpStream  << "v " << x2   << " " << y2 << " " << z2 << std::endl;
                tmpStream  << "v " << x1   << " " << y2 << " " << z1 << std::endl;
                tmpStream  << "v " << x2   << " " << y2 << " " << z1 << std::endl;

                tmpStream  << "vn " <<  "-1"  << " " << "0" << " " << "0" << std::endl;//left
                tmpStream  << "vn " <<  "0"  << " " << "0" << " " << "-1" << std::endl;//front
                tmpStream  << "vn " <<  "0"  << " " << "1" << " " << "0" << std::endl;//up
                tmpStream  << "vn " <<  "0"  << " " << "0" << " " << "1" << std::endl;//back
                tmpStream  << "vn " <<  "0"  << " " << "-1" << " " << "0" << std::endl;//down
                tmpStream  << "vn " <<  "1"  << " " << "0" << " " << "0" << std::endl;//right


                tmpStream << "f " << "-8//-6" << " " << "-7//-6" << " " << "-5//-6"<< " " << "-6//-6" << std::endl;//left
                tmpStream << "f " << "-8//-5" << " " << "-6//-5" << " " << "-2//-5"<< " " << "-4//-5"<< std::endl;//front
                tmpStream << "f " << "-8//-4" << " " << "-7//-4" << " " << "-3//-4"<< " " << "-4//-4"<< std::endl;//up
                tmpStream << "f " << "-7//-3" << " " << "-5//-3" << " " << "-1//-3"<< " " << "-3//-3"<< std::endl;//back
                tmpStream << "f " << "-6//-2" << " " << "-5//-2" << " " << "-1//-2"<< " " << "-2//-2"<< std::endl;//down
                tmpStream << "f " << "-4//-1" << " " << "-3//-1" << " " << "-1//-1"<< " " << "-2//-1"<< std::endl;//right
                j ++;
              }
          }

        if (tmpStream.str() != "")
          {
            std::stringstream name;
            name << Board3D<Space, KSpace>::myCubeSetNameList.at(k);
            if ( name.str() == "")
              {
                name << "myCubeSetList_" << k ;
              }

            typename std::vector< typename Board3D<Space, KSpace>::CubeD3D>::const_iterator itBegin = it->begin();
            unsigned int matid = getMaterialIndex(itBegin->color);
            std::stringstream matName;
            matName << "myCubeSetList_" << k << "MAT";

            outOBJ << "o  " << name.str() << std::endl;
            outOBJ << "usemtl " << matName.str() << std::endl;
            outOBJ << tmpStream.str();

//            typename std::vector< typename Board3D<Space, KSpace>::CubeD3D>::const_iterator itBegin = it->begin();
            Re = itBegin->color.red() /255.0 ;
            Gr = itBegin->color.green() /255.0;
            Bl = itBegin->color.blue() /255.0;
            Tr = itBegin->color.alpha()/255.0;

            bufMTL << "newmtl " << matName.str()  <<std::endl;
            bufMTL << "Ka " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Kd " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Ks 0 0 0" << std::endl;
            bufMTL << "d " << Tr << std::endl;
            bufMTL << "illum 2" << std::endl << std::endl;

          }
        k++;
      }
  }

  //OPT quad
  // myQuadList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    //std::vector<quadD3D>::const_iterator
    k = 0; // id of each list
    for(typename std::vector<std::vector< typename Board3D<Space, KSpace>::QuadD3D> >::const_iterator it =Board3D<Space, KSpace>::myQuadSetList.begin();
        it != Board3D<Space, KSpace>::myQuadSetList.end();   it++)
      {
        std::ostringstream tmpStream;
        for (typename std::vector< typename Board3D<Space, KSpace>::QuadD3D>::const_iterator s_it = it->begin();
             s_it != it->end(); ++s_it)
          {
            //test if a clipping plane do not cut it
            tmpStream << "v " << s_it->point1[0]     << " " << s_it->point1[1]      << " " << s_it->point1[2] << std::endl;
            tmpStream << "v " << s_it->point2[0]     << " " << s_it->point2[1]      << " " << s_it->point2[2] << std::endl;
            tmpStream << "v " << s_it->point3[0]     << " " << s_it->point3[1]      << " " << s_it->point3[2] << std::endl;
            tmpStream << "v " << s_it->point4[0]     << " " << s_it->point4[1]      << " " << s_it->point4[2] << std::endl;

            tmpStream << "f " << "-4" << " " << "-3" << " " << "-2"<< " " << "-1"<< std::endl;
          }
        if (tmpStream.str() != "")
          {
            std::stringstream name;
            name << Board3D<Space, KSpace>::myCubeSetNameList.at(k);
            if ( name.str() == "")
              {
                name << "myQuadSetList_" << k ;
              }

            typename std::vector< typename Board3D<Space, KSpace>::QuadD3D>::const_iterator itBegin = it->begin();
            unsigned int matid = getMaterialIndex(itBegin->color);
            std::stringstream matName;
            matName << "myQuadSetList_" << k  << "MAT";

            outOBJ << "o  " << name.str() << std::endl;
            outOBJ << "usemtl " << matName.str() << std::endl;
            outOBJ << tmpStream.str();

//            typename std::vector< typename Board3D<Space, KSpace>::QuadD3D>::const_iterator itBegin = it->begin();
            Re = itBegin->color.red() /255.0 ;
            Gr = itBegin->color.green() /255.0;
            Bl = itBegin->color.blue() /255.0;
            Tr = itBegin->color.alpha() /255.0;

            bufMTL << "newmtl " << matName.str()  <<std::endl;
            bufMTL << "Ka " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Kd " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Ks 0 0 0" << std::endl;
            bufMTL << "d " << Tr << std::endl;
            bufMTL << "illum 2" << std::endl << std::endl;
          }
      }
  }

  //OPT triangle

  // myTriangleList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    //std::vector<triangleD3D>::const_iterator
    k = 0; // id of each list
    for(typename std::vector<std::vector< typename Board3D<Space, KSpace>::TriangleD3D> >::const_iterator it =Board3D<Space, KSpace>::myTriangleSetList.begin();
        it != Board3D<Space, KSpace>::myTriangleSetList.end();   it++)
      {
        std::ostringstream tmpStream;
        for (typename std::vector< typename Board3D<Space, KSpace>::TriangleD3D>::const_iterator s_it = it->begin();
             s_it != it->end(); ++s_it)
          {
            //test if a clipping plane do not cut it
            bool notCut =true;
            typename std::vector< typename Board3D<Space, KSpace>::ClippingPlaneD3D>::const_iterator itClip =
              Board3D<Space, KSpace>::myClippingPlaneList.begin();
            while (itClip !=Board3D<Space, KSpace>::myClippingPlaneList.end() && notCut )
              {
                double a = itClip->a;
                double b = itClip->b;
                double c = itClip->c;
                double d = itClip->d;
                double d2 = ( a * s_it->point1[0]) + (b * s_it->point1[1]) + ( c * s_it->point1[2] ) + d;
                notCut = ( d2 >= 0);
                d2 = ( a * s_it->point2[0]) + (b * s_it->point2[1]) + ( c * s_it->point2[2]) + d;
                notCut = ( notCut  && ( d2 >= 0) );
                d2 = ( a * s_it->point3[0]) + (b * s_it->point3[1]) + ( c * s_it->point3[2]) + d;
                notCut = ( notCut  && ( d2 >= 0) );

                itClip ++;
              }
            if (notCut)
              {
                tmpStream << "v " << s_it->point1[0]     << " " << s_it->point1[1]      << " " << s_it->point1[2] << std::endl;
                tmpStream << "v " << s_it->point2[0]     << " " << s_it->point2[1]      << " " << s_it->point2[2] << std::endl;
                tmpStream << "v " << s_it->point3[0]     << " " << s_it->point3[1]      << " " << s_it->point3[2] << std::endl;

                tmpStream << "vn " << s_it->nx    << " " << s_it->ny     << " " << s_it->nz << std::endl;

                tmpStream << "f " << "-3//-1" << " " << "-2//-1"<< " " << "-1//-1"<< std::endl;
              }
          }

        if (tmpStream.str() != "")
          {
            std::stringstream name;
            name << Board3D<Space, KSpace>::myTriangleSetNameList.at(k);
            if ( name.str() == "")
              {
                name << "myTriangleSetList_" << k ;
              }
            typename std::vector< typename Board3D<Space, KSpace>::TriangleD3D>::const_iterator itBegin = it->begin();
            unsigned int matid = getMaterialIndex(itBegin->color);
            std::stringstream matName;
            matName << "myTriangleSetList_" << k << "MAT";

            outOBJ << "o  " << name.str() << std::endl;
            outOBJ << "usemtl " << matName.str() << std::endl;
            outOBJ << tmpStream.str();

//            typename std::vector< typename Board3D<Space, KSpace>::TriangleD3D>::const_iterator itBegin = it->begin();
            Re = itBegin->color.red() /255.0 ;
            Gr = itBegin->color.green() /255.0;
            Bl = itBegin->color.blue() /255.0;
            Tr = itBegin->color.alpha() /255.0;

            bufMTL << "newmtl " << matName.str()  <<std::endl;
            bufMTL << "Ka " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Kd " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Ks 0 0 0" << std::endl;
            bufMTL << "d " << Tr << std::endl;
            bufMTL << "illum 2" << std::endl << std::endl;
          }
      }
  }

  //OPT scell

  // Drawing all Khalimsky Space Cells --------------------------------------------------------------------

  // SurfelPrism (from updateList)+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    j=0;
    k=0;
    std::ostringstream tmpStream;

    for (typename std::vector< typename Board3D<Space, KSpace>::QuadD3D>::iterator s_it = Board3D<Space, KSpace>::myPrismList.begin();
         s_it != Board3D<Space, KSpace>::myPrismList.end();
         ++s_it)
      {
        //test if a clipping plane do not cut it
        bool notCut =true;
        typename std::vector< typename Board3D<Space, KSpace>::ClippingPlaneD3D>::const_iterator itClip = Board3D<Space, KSpace>::myClippingPlaneList.begin();
        while (itClip !=Board3D<Space, KSpace>::myClippingPlaneList.end() && notCut )
          {
            double a = itClip->a;
            double b = itClip->b;
            double c = itClip->c;
            double d = itClip->d;
            double d2 = ( a * s_it->point1[0]) + (b * s_it->point1[1]) + ( c * s_it->point1[2] ) + d;
            notCut = ( d2 >= 0);
            d2 = ( a * s_it->point2[0]) + (b * s_it->point2[1]) + ( c * s_it->point2[2]) + d;
            notCut = ( notCut  && ( d2 >= 0) );
            d2 = ( a * s_it->point3[0]) + (b * s_it->point3[1]) + ( c * s_it->point3[2]) + d;
            notCut = ( notCut  && ( d2 >= 0) );
            d2 = ( a * s_it->point4[0]) + (b * s_it->point4[1]) + ( c * s_it->point4[2]) + d;
            notCut = ( notCut  && ( d2 >= 0) );

            itClip ++;
          }
        if (notCut)
          {
            tmpStream << "v " << s_it->point1[0]     << " " << s_it->point1[1]      << " " << s_it->point1[2] << std::endl;
            tmpStream << "v " << s_it->point2[0]     << " " << s_it->point2[1]      << " " << s_it->point2[2] << std::endl;
            tmpStream << "v " << s_it->point3[0]     << " " << s_it->point3[1]      << " " << s_it->point3[2] << std::endl;
            tmpStream << "v " << s_it->point4[0]     << " " << s_it->point4[1]      << " " << s_it->point4[2] << std::endl;

            tmpStream << "vn " << s_it->nx    << " " << s_it->ny     << " " << s_it->nz << std::endl;

            tmpStream << "f " << "-4//-1" << " " << "-3//-1" << " " << "-2//-1"<< " " << "-1//-1" << std::endl;

            j++;

          }
        if (tmpStream.str() != "")
          {
            std::stringstream name;
            name << "mySurfelPrismList" << j;

            typename std::vector< typename Board3D<Space, KSpace>::QuadD3D>::const_iterator itBegin = Board3D<Space, KSpace>::myPrismList.begin();
            unsigned int matid = getMaterialIndex(itBegin->color);
            std::stringstream matName;
            matName << "myPrismList" << j << "MAT";

            outOBJ << "o  " << name.str() << std::endl;
            outOBJ << "usemtl " << matName.str() << std::endl;
            outOBJ << tmpStream.str();

//            typename std::vector< typename Board3D<Space, KSpace>::QuadD3D>::const_iterator itBegin = Board3D<Space, KSpace>::myPrismList.begin();
            Re = itBegin->color.red() /255.0 ;
            Gr = itBegin->color.green() /255.0;
            Bl = itBegin->color.blue() /255.0;
            Tr = itBegin->color.alpha() /255.0;

            bufMTL << "newmtl " << matName.str()  <<std::endl;
            bufMTL << "Ka " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Kd " << Re << " " << Gr << " " << Bl << std::endl;
            bufMTL << "Ks 0 0 0" << std::endl;
            bufMTL << "d " << Tr << std::endl;
            bufMTL << "illum 2" << std::endl << std::endl;
          }
      }


  }

  //OPT tail
  // end SurfelPrism (from updateList)+++++++++++++++++++++++++++++++

  outMTL << bufMTL.str();



  outOBJ.close();
  outMTL.close();
}



/*!
 * \brief init function (should be in Constructor).
 */
template < typename Space, typename KSpace>
inline
void
DGtal::Board3D<Space, KSpace>::init()
{

  myMaterialIndex = 0;

  Board3D<Space, KSpace>::createNewCubeList();
  Board3D<Space, KSpace>::createNewLineList();
  Board3D<Space, KSpace>::createNewBallList();

  Board3D<Space, KSpace>::myCurrentFillColor = DGtal::Color (220, 220, 220);
  Board3D<Space, KSpace>::myCurrentLineColor = DGtal::Color (22, 22, 222, 50);
  Board3D<Space, KSpace>::myDefaultColor= DGtal::Color(255, 255, 255);
  Board3D<Space, KSpace>::myModes["Board3D"]="SolidMode";

  std::string nameLineSet;
  Board3D<Space, KSpace>::myLineSetNameList.push_back(nameLineSet);

  std::string nameBallSet;
  Board3D<Space, KSpace>::myBallSetNameList.push_back(nameBallSet);


  std::string nameQuad;
  Board3D<Space, KSpace>::myQuadSetNameList.push_back(nameQuad);

  std::string nameTriangle;
  Board3D<Space, KSpace>::myTriangleSetNameList.push_back(nameTriangle);

  std::string namePolygon;
  Board3D<Space, KSpace>::myPolygonSetNameList.push_back(namePolygon);
}
///////////////////////////////////////////////////////////////////////////////
template < typename Space, typename KSpace>
inline
unsigned int
DGtal::Board3D<Space, KSpace>::getMaterialIndex(const DGtal::Color &aColor)
{
  std::map<DGtal::Color, unsigned int>::iterator it;

  it = myMaterialMap.find(aColor);

  //The material exists
  if (it != myMaterialMap.end())
      return it->second;

  myMaterialMap.insert( std::pair<DGtal::Color,unsigned int>(aColor,myMaterialIndex) );
  std::stringstream matName ;
  matName << "Mat_" <<myMaterialIndex;
  myMTLBuffer << "newmtl " << matName.str()  <<std::endl;
  myMTLBuffer << "Ka " << aColor.red()/255.0 << " " << aColor.green()/255.0 << " " << aColor.blue()/255.0 << std::endl;
  myMTLBuffer << "Kd " << aColor.red()/255.0 << " " << aColor.green()/255.0 << " " << aColor.blue()/255.0 << std::endl;
  myMTLBuffer << "Ks 0 0 0" << std::endl;
  myMTLBuffer << "d " << aColor.alpha()/255.0 << std::endl;
  myMTLBuffer << "illum 2" << std::endl << std::endl;

  myMaterialIndex++;
  return (myMaterialIndex - 1);
}


//                                                                           //
///////////////////////////////////////////////////////////////////////////////
