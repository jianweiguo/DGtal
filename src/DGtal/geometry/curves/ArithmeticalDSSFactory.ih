/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ArithmeticalDSSFactory.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/10/28
 *
 * Implementation of inline methods defined in ArithmeticalDSSFactory.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>

#include "DGtal/geometry/curves/ArithmeticalDSL.h"
#include "DGtal/geometry/curves/ArithmeticalDSLKernel.h"
#include "DGtal/kernel/NumberTraits.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
template <typename TCoordinate, typename TInteger, unsigned short adjacency>
inline
DGtal::ArithmeticalDSS<TCoordinate,TInteger,adjacency>
DGtal::ArithmeticalDSSFactory<TCoordinate,TInteger,adjacency>::createPattern(const Point& aF, const Point& aL)
{

  //specific case: a and b are both null
  if (aF == aL)
    {
      return DGtal::ArithmeticalDSS<TCoordinate,TInteger,adjacency>( aF );      
    }
  //otherwise
  else 
    {

      //upper leaning points 
      Point Uf, Ul, Lf, Ll; 
      Uf = aF; 
      Ul = aL; 

      //direction vector
      Vector u2 = aL - aF; 
      IntegerComputer<Coordinate> computer; 
      Coordinate gcd = computer.gcd(u2[0], u2[1]); 

      //irreductible direction vector
      Vector u = Vector(u2[0]/gcd, u2[1]/gcd);

      //intercept
      Integer mu = DGtal::ArithmeticalDSL<TCoordinate,TInteger,adjacency>::remainder(u[1], u[0], Uf); 

      //DSL
      DGtal::ArithmeticalDSL<TCoordinate,TInteger,adjacency> dsl(u[1], u[0], mu); 

      //lower leaning points
      if ( dsl.steps().second == Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO) )
	{ //specific case: there is only one step, 
	  //ie. either a == 0, or b == 0, or 
	  //(a == 1 and b == 1) in the naive case
	  Lf = Uf;  
	  Ll = Ul;  

	  return DGtal::ArithmeticalDSS<TCoordinate,TInteger,adjacency>(dsl.a(), dsl.b(), 
						   mu, mu, aF, aL, 
						   Uf, Ul, Lf, Ll, 
						   dsl.steps(), dsl.shift());
	}
      else 
	{ //otherwise
	  Coordinate signedUnity = -1; 
	  Vector v = bezoutVector(u[1], u[0], signedUnity);
	  Lf = Uf + v - dsl.shift()*signedUnity; 
	  Ll = Uf + u*(gcd-1) + v - dsl.shift()*signedUnity; 

	  Integer mu2 = DGtal::ArithmeticalDSL<TCoordinate,TInteger,adjacency>::remainder(u[1], u[0], Lf);
 
	  return DGtal::ArithmeticalDSS<TCoordinate,TInteger,adjacency>(dsl.a(), dsl.b(), 
						   mu, mu2, aF, aL, 
						   Uf, Ul, Lf, Ll, 
						   dsl.steps(), dsl.shift());
	}
    }
}

//-----------------------------------------------------------------------------
template <typename TCoordinate, typename TInteger, unsigned short adjacency>
inline
DGtal::ArithmeticalDSS<TCoordinate,TInteger,adjacency>
DGtal::ArithmeticalDSSFactory<TCoordinate,TInteger,adjacency>::createReversedPattern(const Point& aF, const Point& aL)
{
  DGtal::ArithmeticalDSS<TCoordinate,TInteger,adjacency> pattern = createPattern(aL, aF); 
  return pattern.negate(); 
}

//-----------------------------------------------------------------------------
template <typename TCoordinate, typename TInteger, unsigned short adjacency>
inline
typename DGtal::ArithmeticalDSSFactory<TCoordinate,TInteger,adjacency>::Vector
DGtal::ArithmeticalDSSFactory<TCoordinate,TInteger,adjacency>::
bezoutVector(const Coordinate& aA, 
	     const Coordinate& aB, 
	     const Coordinate& aR)
{
  ASSERT( (aR == 1)||(aR == -1) ); 

  //compute one Bezout vector
  IntegerComputer<Coordinate> computer; 
  Vector v = computer.extendedEuclid(aA, -aB, aR); 
  ASSERT( (aA*v[0]-aB*v[1]) == aR );

  //compute the one whose component
  //have a sign equal to the direction
  //vector components
  if ( (aB >= 0)&&(v[0] < 0) )
    v += Vector(aB,aA); 
  else if ( (aB < 0)&&(v[0] >= 0) )
    v += Vector(aB,aA); 
  else if ( ( aA >= 0 )&&(v[1] < 0) )
    v += Vector(aB,aA);
  else if ( ( aA < 0 )&&(v[1] >= 0) )
    v += Vector(aB,aA);
  ASSERT( (aA*v[0]-aB*v[1]) == aR );
  ASSERT( (( aA >= 0 )&&(v[1] >= 0))||(( aA < 0 )&&(v[1] < 0)) ); 
  ASSERT( (( aB >= 0 )&&(v[0] >= 0))||(( aB < 0 )&&(v[0] < 0)) ); 

  return v; 
}



